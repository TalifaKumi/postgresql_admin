SELECT    pg_terminate_backend(pid) FROM    pg_stat_activity
WHERE    pid <> pg_backend_pid() AND datname = current_database();


select pg_terminate_backend(pid) from pg_stat_activity where datname='DB_NAME';

REVOKE CONNECT ON DATABASE FROM PUBLIC ;

SELECT pg_terminate_backend(procpid) FROM pg_stat_activity WHERE datname='current_db';

ALTER DATABASE current_db RENAME TO old_db;
ALTER DATABASE new_db RENAME TO current_db;


1. Просмотреть список активных запросов и найти нужный:
SELECT pid,query,usename,application_name FROM pg_stat_activity WHERE state = 'active';

2. Вежливо попросить запрос завершиться:
SELECT pg_cancel_backend(<pid of the process>)

3. Убить зависший запрос:
SELECT pg_terminate_backend(<pid of the process>)
===============================

WITH inactive_connections AS (
    SELECT
        pid,
        rank() over (partition by client_addr order by backend_start ASC) as rank
    FROM
        pg_stat_activity
    WHERE
        -- Exclude the thread owned connection (ie no auto-kill)
        pid <> pg_backend_pid( )
    AND
        -- Exclude known applications connections
        application_name !~ '(?:psql)|(?:pgAdmin.+)'
    AND
        -- Include connections to the same database the thread is connected to
        datname = current_database()
    AND
        -- Include inactive connections only
        state in ('idle', 'idle in transaction', 'idle in transaction (aborted)', 'disabled')
    AND
        -- Include old connections (found with the state_change field)
        current_timestamp - state_change > interval '5 minutes'
)
SELECT
    pg_terminate_backend(pid)
FROM
    inactive_connections
WHERE
    rank > 1 -- Leave one connection for each application connected to the database;



--------------


WITH inactive_connections AS (
    SELECT
        pid,state , current_timestamp - state_change,  current_timestamp, state_change,
        rank() over (partition by client_addr order by backend_start ASC) as rank
    FROM
        pg_stat_activity
    WHERE
        -- Exclude the thread owned connection (ie no auto-kill)
        pid <> pg_backend_pid( )
    AND
        -- Exclude known applications connections
        application_name !~ '(?:psql)|(?:pgAdmin.+)'
    AND
        -- Include connections to the same database the thread is connected to
        datname = current_database()
    AND
        -- Include inactive connections only
        state in ('idle', 'idle in transaction (aborted)', 'disabled')
    AND
        -- Include old connections (found with the state_change field)
        current_timestamp - state_change > interval '5 minutes'
)
SELECT
    pg_terminate_backend(pid)
FROM
    inactive_connections
WHERE
    rank > 1 -- Leave one connection for each application connected to the database;
